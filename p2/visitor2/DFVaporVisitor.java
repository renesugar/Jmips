//
// Generated by JTB 1.3.2
//

package visitor2;
import visitor.Visitor;
import syntaxtree.*;
import struct.*;
import toolbox.*;
import java.util.*;
import java.lang.*; // StringBuffer

/**
* Provides default methods which visit each node in the tree in depth-first
* order.  Your visitors may extend this class.
*/
public class DFVaporVisitor implements Visitor
{
    Map<String,Map<String,Struct>> symbol_table; // from DFStackVisitor2
    StringBuffer str_buf;    // write the intermediate code generation here
    int var_cnt = 0;         // counter for distinct variables, increment every time variable created
    int lbl_cnt = 0;         // counter for distinct goto labels, increment every time label created
    int indent_cnt = 0;      // count the indentation depth, increment on enter blocks, decrement on exit blocks
    String var_name = "tmp"; // tmp variable name string
    String lbl_name = "lbl"; // label name string
    String indent = "  ";    // 2 spaces for the indents
    Stack<String> var_stk;   // stack to get last used variable
    Stack<String> lbl_stk;   // stack to get last used label
    Stack<Map<String,String>> name_map_stk; // associate variables with their current tmps
    // String current_class;
    // String current_function;
    String cur_name; // track current identifier
    String old_name; // track the previous identifier
    boolean if_param_flag = false; // track if inside the expression argument to an if statement
    String  if_param_arg = "";  // put the name of the specific temp that goes in the argument spot: if(HERE){...} else{...}

    public DFVaporVisitor(Map<String, Map<String,Struct>> m) // constructor takes in the symbol table from the DFStackVisitor2
    {
        symbol_table = m;
        str_buf = new StringBuffer();
        var_stk = new Stack<String>();
        lbl_stk = new Stack<String>();
        name_map_stk = new Stack<Map<String,String>>();
    }

    // helpers
    void MapDump() // print the top map on stack
    {
        name_map_stk.peek().forEach( (k,v) -> System.out.println("( "+ k + " : " + v + " )") ); // dump map
        System.out.println("");
    }

    void ErrorPrinter(Exception e)
    {
        System.out.println("AN ERROR HAPPENED...");
        e.printStackTrace();
        System.out.println("\nTop Map Dump");
        MapDump();
        System.out.println("\nString Buffer Dump");
        System.out.println(str_buf.toString());
    }

    /* ---------- VISITOR STUFFS BELOW ---------- */

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
    }

    public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
    }

    public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
    }

    public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
    }

    public void visit(NodeToken n) { }

    //
    // User-generated visitor methods below
    //

    /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
    public void visit(Goal n)
    {
        try
        {
            // here do the vtables for the other classes before the main class
            n.f0.accept(this); // goto main there do the main function
            n.f1.accept(this); // goto the classes and do their records
            n.f2.accept(this);

                System.out.println(str_buf.toString()); // print out the complete Vapor IR code
        }
        catch(Exception e)
        {
            ErrorPrinter(e); // to print the crash information

            // System.out.println(str_buf.toString() + "  ret\n"); // test run the broken code
        }
    }

    /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
    public void visit(MainClass n) // special case for the main method, dont need to do a vtable or a record. just output function only
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);

            str_buf.append("func Main()\n"); // declare the main function
            indent_cnt++;   // increase indent on enter main

            Map<String,String> main_vars = new HashMap<String,String>(); // to associate the java name with the cur tmp variable in vapor
            name_map_stk.push(main_vars);

        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        n.f12.accept(this);
        n.f13.accept(this);
        n.f14.accept(this);
        n.f15.accept(this);
        n.f16.accept(this);
        n.f17.accept(this);

            str_buf.append(indent + "ret" + "\n" ); // void function return
            indent_cnt--;   // decrease indent on leave main

            name_map_stk.pop();
    }

    /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
    public void visit(TypeDeclaration n)
    {
        n.f0.accept(this);
    }

    /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
    public void visit(ClassDeclaration n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
    }

    /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
    public void visit(ClassExtendsDeclaration n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
    }

    /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
    public void visit(VarDeclaration n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
    public void visit(MethodDeclaration n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        n.f12.accept(this);
    }

    /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
    public void visit(FormalParameterList n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
    public void visit(FormalParameter n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
    public void visit(FormalParameterRest n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
    public void visit(Type n)
    {
        n.f0.accept(this);
    }

    /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
    public void visit(ArrayType n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
    * f0 -> "boolean"
    */
    public void visit(BooleanType n)
    {
        n.f0.accept(this);
    }

    /**
    * f0 -> "int"
    */
    public void visit(IntegerType n)
    {
        n.f0.accept(this);
    }

    /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
    public void visit(Statement n)
    {
        n.f0.accept(this);
    }

    /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
    public void visit(Block n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
    public void visit(AssignmentStatement n)
    {
            if(cur_name != "")
            {
                old_name = cur_name; // get old name
            }

        n.f0.accept(this);

            String a_name = cur_name;

        n.f1.accept(this);
        n.f2.accept(this);

            String name;
            String tmpexp = var_stk.pop();
            String tmpid = var_name + Integer.toString(var_cnt);
            var_cnt++;

            if( old_name != ""  && cur_name == "" )
            {
                name = old_name;
            }
            else
            {
                name = cur_name;
            }

            if(name_map_stk.peek().get(name) != null)
            {
                // System.out.println("ASS#1");
                // System.out.println("C: " + cur_name + " O: " + old_name + " " + tmpid);
                // System.out.println(var_stk.peek());
                // System.out.println(a_name);
                // MapDump();
                // // name_map_stk.peek().replace(a_name,tmpid);
                // MapDump();
                tmpid = name_map_stk.peek().get(a_name);
            }
            else
            {
                // System.out.println("ASS#2");
                // System.out.println("C: " + cur_name + " O: " + old_name + " " + tmpid);
                // MapDump();
                name_map_stk.peek().put(name,tmpid);
                // MapDump();
            }

            var_stk.push(tmpid);

            String assign = tmpid + " = " + tmpexp + "\n";

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append(printdent + assign);

            cur_name = ""; // clear name

        n.f3.accept(this);
    }

    /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
    public void visit(ArrayAssignmentStatement n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
    }

    /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
    public void visit(IfStatement n)
    {
            String label_else = "else_start_" + lbl_name + Integer.toString(lbl_cnt);
            lbl_cnt++;

            String label_end = "if_end_" + lbl_name + Integer.toString(lbl_cnt);
            lbl_cnt++;

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

        n.f0.accept(this);
        n.f1.accept(this);

            // str_buf.append( printdent + "code for the boolean expression\n");

            if_param_flag = true;
        n.f2.accept(this); // code for the bool_expr
            if_param_flag = false;

            String bool_expr = if_param_arg;

            // IF0 (valOf(bool_expr) == false) THEN GOTO B
            str_buf.append( printdent + "if0 " + bool_expr + " goto :" + label_else + "\n");

        n.f3.accept(this);

            // A <---- valOf(bool_expr) == true
            // str_buf.append( printdent + "code for statement 1 below\n");

            indent_cnt++;
        n.f4.accept(this); // code for statement #1
            indent_cnt--;

            // GOTO END
            str_buf.append( printdent + "goto :" + label_end + "\n");

        n.f5.accept(this);

            // B <---- valOf(bool_expr) == false
            str_buf.append( printdent + label_else + ":\n");
            // str_buf.append( printdent + "code for statement 2 below\n");

            indent_cnt++;
        n.f6.accept(this); // code for statement #2
            indent_cnt--;

            // END
            str_buf.append(printdent + label_end + ":\n");
    }

    /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
    public void visit(WhileStatement n)
    {

            String label_begin = "loop_start_" + lbl_name + Integer.toString(lbl_cnt);
            lbl_cnt++;

            String label_end = "loop_end_" + lbl_name + Integer.toString(lbl_cnt);
            lbl_cnt++;

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            // BEGIN
            str_buf.append(printdent + label_begin + ":\n");

        n.f0.accept(this);
        n.f1.accept(this);

            if_param_flag = true;
        n.f2.accept(this);  // code for bool expr
            if_param_flag = false;

            String bool_expr = if_param_arg;

            // IF0 (valOf(bool_expr) == false) THEN GOTO B
            str_buf.append( printdent + "if0 " + bool_expr + " goto :" + label_end + "\n");

        n.f3.accept(this);

            indent_cnt++;
        n.f4.accept(this);
            indent_cnt--;

            str_buf.append("  " + printdent + "goto :" + label_begin + "\n");

            // END
            str_buf.append(printdent + label_end + ":\n");
    }

    /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
    public void visit(PrintStatement n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);

            String tmp;
            String name = cur_name;
            // if( name_map_stk.peek().get(name) == null )
            // {
                // grab the name of the last tmp variable
                tmp = var_stk.pop();
            // }
            // else
            // {
            //     tmp = name_map_stk.peek().get(name);
            // }

        n.f3.accept(this);
        n.f4.accept(this);

            // write out the print statement with indents
            String printints = "PrintIntS(" + tmp + ")\n";

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append( printdent + printints );

            cur_name = "";
    }

    /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
    public void visit(Expression n)
    {
        n.f0.accept(this);
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
    public void visit(AndExpression n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
    public void visit(CompareExpression n)
    {
        // get tmp
        String val2;
        String val1;
        String name;

        n.f0.accept(this);

            name = cur_name;
            if( name_map_stk.peek().get(name) == null )
            {
                // grab the name of the last tmp variable
                val1 = var_stk.pop();
            }
            else
            {
                val1 = name_map_stk.peek().get(name);
            }

            cur_name = "";

        n.f1.accept(this);

        n.f2.accept(this);

            name = cur_name;
            if( name_map_stk.peek().get(name) == null )
            {
                // grab the name of the last tmp variable
                val2 = var_stk.pop();
            }
            else
            {
                val2 = name_map_stk.peek().get(name);
            }

            String tmpres = var_name + Integer.toString(var_cnt); // create new tmp var for result of operation
            var_cnt++; // increment variable number

            var_stk.push(tmpres); // push tmp on stack

            String result = tmpres + " = LtS(" + val1 + " " + val2 + ")\n";

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append(printdent + result);

            cur_name = "";

            if(if_param_flag == true) // maybe a special case for when less than
            {
                if_param_arg = tmpres;
            }
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
    public void visit(PlusExpression n)
    {
        // get tmp
        String val2;
        String val1;
        String name;

        n.f0.accept(this);

            name = cur_name;
            if( name_map_stk.peek().get(name) == null )
            {
                // grab the name of the last tmp variable
                val1 = var_stk.pop();
            }
            else
            {
                val1 = name_map_stk.peek().get(name);
            }

            cur_name = "";

        n.f1.accept(this);

        n.f2.accept(this);

            name = cur_name;
            if( name_map_stk.peek().get(name) == null )
            {
                // grab the name of the last tmp variable
                val2 = var_stk.pop();
            }
            else
            {
                val2 = name_map_stk.peek().get(name);
            }

            String tmpres = var_name + Integer.toString(var_cnt); // create new tmp var for result of operation
            var_cnt++; // increment variable number

            var_stk.push(tmpres); // push tmp on stack

            String result = tmpres + " = Add(" + val1 + " " + val2 + ")\n";

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append(printdent + result);

            cur_name = "";
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
    public void visit(MinusExpression n)
    {
        // get tmp
        String val2;
        String val1;
        String name;

        n.f0.accept(this);

            name = cur_name;
            if( name_map_stk.peek().get(name) == null )
            {
                // grab the name of the last tmp variable
                val1 = var_stk.pop();
            }
            else
            {
                val1 = name_map_stk.peek().get(name);
            }

            cur_name = "";

        n.f1.accept(this);

        n.f2.accept(this);

            name = cur_name;
            if( name_map_stk.peek().get(name) == null )
            {
                // grab the name of the last tmp variable
                val2 = var_stk.pop();
            }
            else
            {
                val2 = name_map_stk.peek().get(name);
            }

            String tmpres = var_name + Integer.toString(var_cnt); // create new tmp var for result of operation
            var_cnt++; // increment variable number

            var_stk.push(tmpres); // push tmp on stack

            String result = tmpres + " = Sub(" + val1 + " " + val2 + ")\n";

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append(printdent + result);

            cur_name = "";
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
    public void visit(TimesExpression n)
    {
        // get tmp
        String val2;
        String val1;
        String name;

        n.f0.accept(this);

            name = cur_name;
            if( name_map_stk.peek().get(name) == null )
            {
                // grab the name of the last tmp variable
                val1 = var_stk.pop();
            }
            else
            {
                val1 = name_map_stk.peek().get(name);
            }

            cur_name = "";

        n.f1.accept(this);

        n.f2.accept(this);

            name = cur_name;
            if( name_map_stk.peek().get(name) == null )
            {
                // grab the name of the last tmp variable
                val2 = var_stk.pop();
            }
            else
            {
                val2 = name_map_stk.peek().get(name);
            }

            String tmpres = var_name + Integer.toString(var_cnt); // create new tmp var for result of operation
            var_cnt++; // increment variable number

            var_stk.push(tmpres); // push tmp on stack

            String result = tmpres + " = MulS(" + val1 + " " + val2 + ")\n";

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append(printdent + result);

            cur_name = "";
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
    public void visit(ArrayLookup n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
    public void visit(ArrayLength n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
    public void visit(MessageSend n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
    }

    /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
    public void visit(ExpressionList n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
    * f0 -> ","
    * f1 -> Expression()
    */
    public void visit(ExpressionRest n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
    public void visit(PrimaryExpression n)
    {
        n.f0.accept(this);
    }

    /**
    * f0 -> <INTEGER_LITERAL>
    */
    public void visit(IntegerLiteral n)
    {
        n.f0.accept(this);

            String tmpid = var_name + Integer.toString(var_cnt);
            var_cnt++;
            var_stk.push(tmpid); // put new tmp int var onto the stack

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append( printdent + tmpid + " = " + n.f0.toString() + "\n");
    }

    /**
    * f0 -> "true"
    */
    public void visit(TrueLiteral n) // true == 1
    {
        n.f0.accept(this);

            String tmpid = var_name + Integer.toString(var_cnt);
            var_cnt++;
            var_stk.push(tmpid); // put new tmp int var onto the stack

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append( printdent + tmpid + " = 1\n");

            if(if_param_flag == true) // maybe a special case for when single true is in the if expression
            {
                if_param_arg = tmpid;
            }
    }

    /**
    * f0 -> "false"
    */
    public void visit(FalseLiteral n) // false == 0
    {
        n.f0.accept(this);

            String tmpid = var_name + Integer.toString(var_cnt);
            var_cnt++;
            var_stk.push(tmpid); // put new tmp int var onto the stack

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append( printdent + tmpid + " = 0\n");

            if(if_param_flag == true) // maybe a special case for when single false is in the if expression
            {
                if_param_arg = tmpid;
            }
    }

    /**
    * f0 -> <IDENTIFIER>
    */
    public void visit(Identifier n)
    {
        n.f0.accept(this);

            cur_name = n.f0.toString();

            if(symbol_table.get(cur_name) != null ) // if exists in map then is a class/function
            {
                return;
            }

            if(name_map_stk.peek().get(cur_name) == null)  // dont create random null vars?
            {
                return;
            }

            String tmpid = var_name + Integer.toString(var_cnt);
            var_cnt++;
            var_stk.push(tmpid); // put new tmp int var onto the stack

            String printdent = "";
            for(int i = 0; i < indent_cnt; i++)
            {
                printdent += indent;
            }

            str_buf.append( printdent + tmpid + " = " + name_map_stk.peek().get(cur_name) + "\n");

            if(if_param_flag == true) // maybe a special case for when single id is in the if expression
            {
                if_param_arg = name_map_stk.peek().get(cur_name); // might break if empty stack?
            }
    }

    /**
    * f0 -> "this"
    */
    public void visit(ThisExpression n)
    {
        n.f0.accept(this);
    }

    /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
    public void visit(ArrayAllocationExpression n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
    public void visit(AllocationExpression n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
    * f0 -> "!"
    * f1 -> Expression()
    */
    public void visit(NotExpression n)
    {
        n.f0.accept(this);
        n.f1.accept(this);

            // str_buf.append("not expression\n");
            // System.out.println(var_stk.peek());
    }

    /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
    public void visit(BracketExpression n)
    {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

}
