#!/bin/bash

# Mini Java Compiler build and test script
# Modular procedural shell script with each phase separated
# each subroutine executes from the base directory

# PHASE 1 - Type Checking (DONE)
# PHASE 2 - Intermediate Code Generation
# PHASE 3 - Register Allocation
# PHASE 4 - Activation Records and Instruction Selection

#============================================================
# MAIN DRIVER ROUTINE
#============================================================

# GLOBALS - stuff
JTB_JAR="../stuff/jtb.jar"          # Tree Builder
MINI_J="../stuff/minijava.jj"       # Tree Builder Input
VAPOR_I="../stuff/vapor.jar"        # Vapor Interpreter
VAPOR_P="../stuff/vapor-parser.jar" # Vapor Parser
MARS="../stuff/mars.jar"            # MIPS Interpreter

# GLOBALS - tests
LOG1="../custom_logfile.txt"
LOG2="../manual_logfile.txt"
TJAVA="../tests/tester.java"
TEST1="../tests/Phase1Tester/SelfTestCases/*"
TEST2="../tests/Phase2Tester/SelfTestCases/*.java"

# Driver for all the test harnesses, main is called at bottom
# each phase has a specific test harness procedure, test harnesses are commented out as needed
function main()
{
    # do_p  1
    # do_p  2
    # do_p  3
    do_p  4
    # p_wipe
}

# STEPS OF do_p()
# 1. if no build exists make one
# 2. run preliminary tests on custom file
# 3. loop over every actual test file
# 4. rm .class files && cleanup for test script
# 5. make the .tgz file and use official run script on it
# 6. rm everything that gets auto generated by the script
function do_p()
{
    case $1 in
        1)
            p_init   p1  Typecheck.java
            p_check  p1  Typecheck  $TJAVA  $TEST1
            p_clean  p1
            p_test   p1  Typecheck.java  DFTypeCheckVisitor.java  hw1  tests/Phase1Tester
            ;;
        2)  #----------------------------------------
            p_init   p2  J2V.java
            p_vapor  p2  J2V  $TJAVA  $TEST2
            p_clean  p2
            p_test   p2  J2V.java  DFVaporVisitor.java  hw2  tests/Phase2Tester
            ;;
        3)  #----------------------------------------
            p3_builder
            p3_tester  p3  V2VM.java  hw3  tests/Phase3Tester
            ;;
        4)  #----------------------------------------
            p4_builder
            ;;
        *)  #----------------------------------------
            echo "invalid option"
            exit 1
            ;;
    esac

    return
}

# remove all the auto generated stuff from above
# should be a universal cleanup helper
function p_wipe()
{
    echo "wiping out the extras"; echo
    rm -rf hw*     > /dev/null 2>&1
    rm *logfile.*  > /dev/null 2>&1
    rm -rf tests/Phase1Tester/Output  > /dev/null 2>&1
    rm -rf tests/Phase2Tester/Output  > /dev/null 2>&1
    rm -rf tests/Phase3Tester/Output  > /dev/null 2>&1
    rm -rf tests/Phase4Tester/Output  > /dev/null 2>&1
}

#============================================================
# PHASE 1 && 2 SHARED BUILD TESTER
#============================================================

# INITIALIZE PROJECT
# Create skeleton MiniJava parser and generate syntax tree classes and visitor classes, etc...
# arg1 = directory, arg2 = java main file
function p_init()
{
    echo
    if ! [ -d $1 ] ; then
        echo "Creating initial build"; echo
        mkdir $1
        cd $1
        java -jar $JTB_JAR $MINI_J
        javacc jtb.out.jj
        rm jtb.out.jj
        touch $2
        exit 0 # done on init
    fi

    echo "Build exists"; echo
    cd $1
    echo "Compiling"; echo
    javac $2
    cd ..
}

# REMOVE CLASS FILES
# remove any .class files from the build
# also used because cant submit .class files in the tarball
# arg1 = directory to clean
function p_clean()
{
    cd $1;         rm *.class
    cd visitor;    rm *.class; cd ..
    cd visitor2;   rm *.class; cd ..
    cd syntaxtree; rm *.class; cd ..
    cd struct;     rm *.class; cd ..
    cd toolbox;    rm *.class; cd ..
    cd ..
}

# PHASE 1 typecheck
# CUSTOM && MANUAL TEST - TYPECHECKER
# testing type checking on a custom file
# arg1 = folder, arg 2 = java main class, arg3 = customtest, arg4 = multifile test
function p_check()
{
    cd $1

    echo "Checking "$3; echo
    echo "See custom_logfile.txt for trace"; echo
    java $2 < $3 &> $LOG1

    echo "Manually testing all the Test cases"; echo
    echo "See manual_logfile.txt for trace"; echo

    echo "" > $LOG2
    for FILE in $4 ;
    do
        echo "CHECKING: "$FILE >> $LOG2
        if ! java $2 < $FILE >> $LOG2; then
            continue
        fi
        echo "" >> $LOG2
    done

    # optional log print
    echo "Printing Logs"; echo
    echo "custom_logfile.txt"; echo
    cat $LOG1; echo
    echo "manual_logfile.txt"
    cat $LOG2
    echo

    cd ..
}

# PHASE 2 vapor
# CUSTOM && MANUAL TEST - VAPOR GENERATOR
# testing code generation on a custom file
# arg1 = folder, arg 2 = java main class, arg3 = customtest, arg4 = multifile test
function p_vapor()
{
    cd $1

    echo "Code Generate "$3; echo
    echo "See custom_logfile.txt for trace"; echo
    java $2 < $3 &> $LOG1
    echo "code print out"; echo
    cat -n $LOG1
    echo "Code test "$3; echo
    java -jar $VAPOR_I run $LOG1; echo

    echo "Manually testing all the Test cases"; echo
    echo "See manual_logfile.txt for trace"; echo

    for FILE in $4 ;
    do
        echo "" > $LOG2
        if ! java $2 < $FILE &> $LOG2; then
            echo "Error with vapor generate: ""$FILE"
            continue
        fi
        echo "code print out: ""$FILE"; echo
        cat -n $LOG2
        echo "Code test "$FILE; echo
        java -jar $VAPOR_I run $LOG2; echo
    done

    cd ..
}

# TEST With Grading Script
# run the grading script with all the included test cases
# it expects a tar file named "hw[1-4].tgz" to be used with the "run" script
# args: $1 = code directory, $2 = main file, $3 = visitor file, $4 = hw name, $5 = testcases
function p_test()
{
    if [ -e $4 ] ; then
        echo "Deleteing old folder"
        rm -rf $4
    fi

    if [ -e $4.tgz ] ; then
        echo "Deleteing old tarball"
        rm -rf $4.tgz
    fi

    echo "Making new tar file for submission"; echo

    mkdir $4
    mkdir $4/visitor2
    mkdir $4/struct
    mkdir $4/toolbox

    cp $1/struct/*   $4/struct
    cp $1/toolbox/*  $4/toolbox
    cp $1/$2  $4                            # <--- main file
    cp $1/visitor2/DFStackVisitor.java   $4/visitor2
    cp $1/visitor2/DFStackVisitor2.java  $4/visitor2
    cp $1/visitor2/$3  $4/visitor2          # <--- visitor file

    tar zcvf $4.tgz $4 > /dev/null

    echo "Running Tester Script"; echo

    cd $5                                   # <--- test directory

    source run SelfTestCases ../../$4.tgz

    echo;

    cd ../..
}

#============================================================
# PHASE 3 BUILD TESTER
#============================================================

function p3_builder()
{
    # to compile have to include .jar file because source is incomplete
    # to run need the .jar file and location of the project folder for the .class files
    CLASSPATH="$VAPOR_P:../p3"
    VFILE="../tests/vtester.vapor"

    cd p3

    echo; echo "compile phase3"; echo

    javac -classpath ${CLASSPATH} V2VM.java

    echo "output vapor to vaporm"; echo

    java -classpath ${CLASSPATH} V2VM < $VFILE > $LOG1

    cat -n $LOG1

    echo; echo "test run vaporm"; echo

    java -jar $VAPOR_I run -mips $LOG1

    echo

    rm *.class > /dev/null 2>&1
    rm cs132/vapor/ast/*.class > /dev/null 2>&1
    rm Graph/*.class > /dev/null 2>&1

    cd ..
}

# TEST With Grading Script (different)
# run the grading script with all the included test cases
# it expects a tar file named "hw[1-4].tgz" to be used with the "run" script
# args: $1 = code directory, $2 = main file, $3 = HomeworkName, $4 = testcases
function p3_tester()
{
    if [ -e $3 ] ; then
        echo "Deleteing old folder"
        rm -rf $3
    fi

    if [ -e $3.tgz ] ; then
        echo "Deleteing old tarball"
        rm -rf $3.tgz
    fi

    echo "Making new tar file for submission"; echo

    mkdir $3
    mkdir $3/Graph

    cp $1/Graph/*   $3/Graph
    cp $1/$2  $3                            # <--- main file

    mkdir $3/cs132
    mkdir $3/cs132/vapor
    mkdir $3/cs132/vapor/ast

    cp $1/cs132/vapor/ast/*  $3/cs132/vapor/ast

    tar zcvf $3.tgz $3 > /dev/null

    echo "Running Tester Script"; echo

    cd $4                                   # <--- test directory

    source run SelfTestCases ../../$3.tgz

    echo;

    cd ../..
}


#============================================================
# PHASE 4 BUILD TESTER
#============================================================

function p4_builder()
{
    # to compile have to include .jar file because source is incomplete
    # to run need the .jar file and location of the project folder for the .class files
    CLASSPATH="$VAPOR_P:../p4"
    VFILE="../tests/vtester.vaporm"

    cd p4

    echo; echo "compile phase4"; echo

    javac -classpath ${CLASSPATH} VM2M.java

    echo "output vaporm to mips"; echo

    java -classpath ${CLASSPATH} VM2M < $VFILE > $LOG1

    cat -n $LOG1

    echo; echo "test run mips"; echo

    java -jar $MARS nc $LOG1

    echo

    rm *.class > /dev/null 2>&1
    rm cs132/vapor/ast/*.class > /dev/null 2>&1

    cd ..
}

# TEST With Grading Script (different)
# run the grading script with all the included test cases
# it expects a tar file named "hw[1-4].tgz" to be used with the "run" script
# args: $1 = code directory, $2 = main file, $3 = HomeworkName, $4 = testcases
# function p4_tester()
# {
#     if [ -e $3 ] ; then
#         echo "Deleteing old folder"
#         rm -rf $3
#     fi
#
#     if [ -e $3.tgz ] ; then
#         echo "Deleteing old tarball"
#         rm -rf $3.tgz
#     fi
#
#     echo "Making new tar file for submission"; echo
#
#     mkdir $3
#
#     cp $1/$2  $3                            # <--- main file
#
#     mkdir $3/cs132
#     mkdir $3/cs132/vapor
#     mkdir $3/cs132/vapor/ast
#
#     cp $1/cs132/vapor/ast/*  $3/cs132/vapor/ast
#
#     tar zcvf $3.tgz $3 > /dev/null
#
#     echo "Running Tester Script"; echo
#
#     cd $4                                   # <--- test directory
#
#     source run SelfTestCases ../../$3.tgz
#
#     echo;
#
#     cd ../..
# }


#============================================================
# DRIVER - Run the main driver routine for the harnesses
#============================================================

main
