//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import struct.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DFStackVisitor implements Visitor {

    // data members
    public Stack<String> context_stack;
    public Stack<Map<String,String>> map_stack;
    public Vector<Map<String,String>> map_vec;

    public DFStackVisitor()
    {
        context_stack = new Stack<String>();
        map_stack = new Stack<Map<String,String>>();
        map_vec = new Vector<Map<String,String>>();
    }

   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public void visit(Goal n)
   {
            context_stack.push("{ Global_Start");

            Map<String,String> global_map = new HashMap<String,String>(); //global  map for everything in file
            map_stack.push(global_map);                                   // put global map on stack

        n.f0.accept(this);
        n.f1.accept(this); // this is a  NodeListOptional
        n.f2.accept(this);
            context_stack.push("} Global_End");

            map_vec.add(map_stack.peek());
            map_stack.pop();
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public void visit(MainClass n)
   {
        n.f0.accept(this);
            context_stack.push("class");
        n.f1.accept(this);
            String tmp1 = context_stack.pop();
            String tmp2 = context_stack.pop();
            context_stack.push(tmp2+" "+tmp1);

            map_stack.peek().put(tmp1,tmp2);                             // add this class to global map
            Map<String,String> class_map = new HashMap<String,String>(); // map for this class which has the main() method
            map_stack.push(class_map);                                   // push this class's map onto stack

        n.f2.accept(this);
            context_stack.push("{ class_start");
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
            context_stack.push("public static void main");


            map_stack.peek().put("main","method");                      // add this method to class map
            Map<String,String> main_map = new HashMap<String,String>(); // map for  the main() method
            map_stack.push(main_map);                                   // push this method's map onto stack

        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
            context_stack.push("String[]"); // special case
        n.f11.accept(this);
            String tmp3 = context_stack.pop();
            String tmp4 = context_stack.pop();
            context_stack.push(tmp4+" "+tmp3);

            map_stack.peek().put(tmp3,tmp4);                           // add String[] name class to global map

        n.f12.accept(this);
            String tmp5 = context_stack.pop();
            context_stack.push("{ main_start");
            context_stack.push(tmp5);
        n.f13.accept(this);
        n.f14.accept(this);
        n.f15.accept(this);
            context_stack.push("} main_end");

            map_vec.add(map_stack.peek());
            map_stack.pop();

        n.f16.accept(this);
        n.f17.accept(this);
            context_stack.push("} class_end");

            map_vec.add(map_stack.peek());
            map_stack.pop();
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public void visit(TypeDeclaration n)
   {
        n.f0.accept(this);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public void visit(ClassDeclaration n)
   {
        n.f0.accept(this);
            context_stack.push("class");
        n.f1.accept(this);
            String tmp1 = context_stack.pop();
            String tmp2 = context_stack.pop();
            context_stack.push(tmp2+" "+tmp1);

            map_stack.peek().put(tmp1,tmp2);                             // add this class to global map
            Map<String,String> class_map = new HashMap<String,String>(); // map for this class which has the main() method
            map_stack.push(class_map);                                   // push this class's map onto stack

        n.f2.accept(this);
            context_stack.push("{ class_start");
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
            context_stack.push("} class_end");

            map_vec.add(map_stack.peek());
            map_stack.pop();
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public void visit(ClassExtendsDeclaration n)
   {
        n.f0.accept(this);
            context_stack.push("class");
        n.f1.accept(this);
        n.f2.accept(this);
            context_stack.push("extends");
        n.f3.accept(this);
            String tmp1 = context_stack.pop();
            String tmp2 = context_stack.pop();
            String tmp3 = context_stack.pop();
            String tmp4 = context_stack.pop();
            context_stack.push(tmp4+" "+tmp3+" "+tmp2+" "+tmp1);

            map_stack.peek().put(tmp1,tmp2);                             // add this class to global map
            Map<String,String> class_map = new HashMap<String,String>(); // map for this class which has the main() method
            map_stack.push(class_map);                                   // push this class's map onto stack

        n.f4.accept(this);
            context_stack.push("{ class_start");
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
            context_stack.push("} class_end");

            map_vec.add(map_stack.peek());
            map_stack.pop();
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
            String tmp1 = context_stack.pop();
            String tmp2 = context_stack.pop();
            context_stack.push(tmp2+" "+tmp1);

            map_stack.peek().put(tmp1,tmp2); // add this variable to map

        n.f2.accept(this);
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public void visit(MethodDeclaration n)
   {
        n.f0.accept(this);
            context_stack.push("public");
        n.f1.accept(this);
        n.f2.accept(this);
            String tmp1 = context_stack.pop();
            String tmp2 = context_stack.pop();
            String tmp3 = context_stack.pop();
            context_stack.push(tmp3+" "+tmp2+" "+tmp1);
            context_stack.push("{ method_start");

            map_stack.peek().put(tmp1,"method");                          // add this method to  map
            Map<String,String> method_map = new HashMap<String,String>(); // map for this method
            map_stack.push(method_map);                                   // push this methods's map onto stack

        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        n.f12.accept(this);
            context_stack.push("} method_end");

            map_vec.add(map_stack.peek());
            map_stack.pop();
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public void visit(FormalParameterList n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public void visit(FormalParameter n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
            String tmp1 = context_stack.pop();
            String tmp2 = context_stack.pop();
            context_stack.push(tmp2+" "+tmp1);

            map_stack.peek().put(tmp1,tmp2);  // add this parameter to the function's map
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public void visit(FormalParameterRest n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public void visit(Type n)
   {
        n.f0.accept(this);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public void visit(ArrayType n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
            context_stack.push("int[]");
   }

   /**
    * f0 -> "boolean"
    */
   public void visit(BooleanType n)
   {
        n.f0.accept(this);
            context_stack.push("boolean");
   }

   /**
    * f0 -> "int"
    */
   public void visit(IntegerType n)
   {
        n.f0.accept(this);
            context_stack.push("int");
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public void visit(Statement n)
   {
        n.f0.accept(this);
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public void visit(Block n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public void visit(AssignmentStatement n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public void visit(ArrayAssignmentStatement n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public void visit(IfStatement n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(WhileStatement n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public void visit(PrintStatement n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public void visit(Expression n)
   {
        n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public void visit(AndExpression n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public void visit(CompareExpression n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public void visit(PlusExpression n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public void visit(MinusExpression n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public void visit(TimesExpression n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public void visit(ArrayLookup n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public void visit(ArrayLength n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public void visit(MessageSend n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
            context_stack.push(".");
        n.f2.accept(this);
            String tmp1 = context_stack.pop();
            String tmp2 = context_stack.pop();
            String tmp3 = context_stack.pop();
            context_stack.push(tmp3+" "+tmp2+" "+tmp1);

            map_stack.peek().put(tmp3,"class");  // name of class that owns the function
            map_stack.peek().put(tmp1,"method"); // add the name of the function that gets called

        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public void visit(ExpressionList n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public void visit(ExpressionRest n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public void visit(PrimaryExpression n)
   {
        n.f0.accept(this);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n)
   {
        n.f0.accept(this);
   }

   /**
    * f0 -> "true"
    */
   public void visit(TrueLiteral n)
   {
        n.f0.accept(this);
   }

   /**
    * f0 -> "false"
    */
   public void visit(FalseLiteral n)
   {
        n.f0.accept(this);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n)
   {
        n.f0.accept(this);
            context_stack.push(n.f0.toString());
   }

   /**
    * f0 -> "this"
    */
   public void visit(ThisExpression n)
   {
        n.f0.accept(this);
            context_stack.push("this");
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public void visit(ArrayAllocationExpression n)
   {
        n.f0.accept(this);
            //context_stack.push("new");
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
            context_stack.push("int[]");
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public void visit(AllocationExpression n)
   {
        n.f0.accept(this);
            //context_stack.push("new");
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public void visit(NotExpression n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public void visit(BracketExpression n)
   {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
   }

}
